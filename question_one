public abstract class Employee {
    private String name;
    private String position;
    private double basicSalary;
    private int experience;
    private String educationLevel;

    public Employee(String name, String position, double basicSalary, int experience, String educationLevel) {
        this.name = name;
        this.position = position;
        this.basicSalary = basicSalary;
        this.experience = experience;
        this.educationLevel = educationLevel;
    }

    public String getName() {
        return name;
    }

    public String getPosition() {
        return position;
    }

    public double getBasicSalary() {
        return basicSalary;
    }

    public int getExperience() {
        return experience;
    }

    public String getEducationLevel() {
        return educationLevel;
    }

    public abstract double calculateSalary();

    public abstract double calculateBonus();
}

public class FullTimeEmployee extends Employee {
    public FullTimeEmployee(String name, String position, double basicSalary, int experience, String educationLevel) {
        super(name, position, basicSalary, experience, educationLevel);
    }

    @Override
    public double calculateSalary() {
        double salary = getBasicSalary() + (getBasicSalary() * 0.05 * getExperience());
        if (getEducationLevel().equalsIgnoreCase("bachelor degree")) {
            salary += 500;
        } else if (getEducationLevel().equalsIgnoreCase("diploma")) {
            salary += 250;
        }
        return salary;
    }

    @Override
    public double calculateBonus() {
        return getBasicSalary() * 0.03;
    }
}

public class PartTimeEmployee extends Employee {
    public PartTimeEmployee(String name, String position, double basicSalary, int experience, String educationLevel) {
        super(name, position, basicSalary, experience, educationLevel);
    }

    @Override
    public double calculateSalary() {
        double salary = getBasicSalary() + (getBasicSalary() * 0.05 * getExperience());
        if (getEducationLevel().equalsIgnoreCase("bachelor degree")) {
            salary += 500;
        } else if (getEducationLevel().equalsIgnoreCase("diploma")) {
            salary += 250;
        }
        return salary;
    }

    @Override
    public double calculateBonus() {
        return getBasicSalary() * 0.015;
    }
}


You can create instances of these classes and call their methods to calculate the salary and bonus for each employee, like this:

FullTimeEmployee fullTimeEmployee = new FullTimeEmployee("John", "Manager", 5000, 5, "Bachelor Degree");
double fullTimeSalary = fullTimeEmployee.calculateSalary();
double fullTimeBonus = fullTimeEmployee.calculateBonus();

PartTimeEmployee partTimeEmployee = new PartTimeEmployee("Jane", "Clerk", 2000, 2, "Diploma");
double partTimeSalary = partTimeEmployee.calculateSalary();
double partTimeBonus = partTimeEmployee.calculateBonus();
